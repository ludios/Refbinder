diff --git a/mypy/strops.py b/mypy/strops.py
index 9a9d5d7..ca3a8aa 100644
--- a/mypy/strops.py
+++ b/mypy/strops.py
@@ -2,6 +2,8 @@
 Basic string operations that should have been in Python.
 """
 
+from sys import getsizeof
+
 _postImportVars = vars().keys()
 
 
@@ -21,6 +23,11 @@ def rreplace(string, needle, replacement):
 	return (string[:location] + replacement + string[location + len(needle):])
 
 
+class _DummyObject(object):
+	__slots__ = ('x', 'y', 'z')
+
+_sizeOfDummy = getsizeof(_DummyObject())
+
 
 class StringFragment(object):
 	"""
@@ -110,6 +117,10 @@ class StringFragment(object):
 		return True if type(self) != type(other) else self.toBuffer() != other.toBuffer()
 
 
+	def __sizeof__(self):
+		return _sizeOfDummy + getsizeof(self.string) + getsizeof(self.pos) + getsizeof(self.size)
+
+
 
 from pypycpyo import optimizer
 optimizer.bind_all_many(vars(), _postImportVars)
diff --git a/mypy/test/test_strops.py b/mypy/test/test_strops.py
index 1196584..a8f257a 100644
--- a/mypy/test/test_strops.py
+++ b/mypy/test/test_strops.py
@@ -1,3 +1,4 @@
+from sys import getsizeof
 from twisted.trial import unittest
 
 from mypy import strops
@@ -116,6 +117,13 @@ class StringFragmentTests(unittest.TestCase):
 		self.assertRaises(IndexError, lambda: f1[-2])
 
 
+	def test_sizeof(self):
+		longString = "helloworld" * 100
+		f1 = strops.StringFragment(longString, 0, 5)
+		sizes = (getsizeof(f1), getsizeof(longString))
+		self.assertTrue(sizes[0] > sizes[1], sizes)
+
+
 	def test_slice(self):
 		f1 = strops.StringFragment("helloworld", 0, 5)
 		self.assertEqual("ello", str(f1[1:5]))
